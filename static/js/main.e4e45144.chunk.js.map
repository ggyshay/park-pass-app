{"version":3,"sources":["icons/burger.svg","icons/close.svg","components/header.jsx","dataInterface.js","pages/cars.jsx","pages/parkingLots.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","onClick","style","width","height","display","paddingLeft","alignItems","src","require","color","fontSize","marginLeft","title","getCars","a","fetch","res","json","console","log","getParks","Cars","useState","cars","setCars","useEffect","then","cs","className","map","car","key","plate","model","localiza_active","ParkingLots","parks","setParks","p","parklots","pl","justifyContent","name","adress","getSpotsColor","free_car_spots","spots","s","split","App","isOpen","setIsOpen","path","setPath","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e4e45144.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/burger.53cec344.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.1a91c173.svg\";","import React from \"react\";\n\nexport const Header = props => (\n  <div\n    onClick={props.onClick}\n    style={{\n      width: \"100%\",\n      height: 50,\n      display: \"flex\",\n      paddingLeft: 16,\n      alignItems: \"center\"\n    }}\n  >\n    <img\n      src={require(\"../icons/burger.svg\")}\n      style={{ width: 27, height: 27 }}\n    />\n    <p style={{ color: \"white\", fontSize: 27, marginLeft: 16 }}>\n      {props.title}\n    </p>\n  </div>\n);\n","export const getCars = async () => {\n  const res = await fetch(\n    \"https://ef41asg6e4.execute-api.us-east-1.amazonaws.com/cars_by_user?user_id=1\"\n  );\n  const a = await res.json();\n  console.log(a);\n  return a;\n};\n\nexport const getParks = async () => {\n  const res = await fetch(\n    \"https://ef41asg6e4.execute-api.us-east-1.amazonaws.com/search_parklots\"\n  );\n  const a = await res.json();\n  console.log(\"res json\", a);\n  return a;\n};\n","import React from \"react\";\nimport \"./pages.css\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { getCars } from \"../dataInterface\";\n\nexport const Cars = props => {\n  const [cars, setCars] = useState([]);\n  useEffect(() => {\n    getCars().then(cs => setCars(cs.cars));\n  }, []);\n  return (\n    <div className=\"page-container\">\n      {cars.map(car => (\n        <div className=\"list-item\" key={car.plate}>\n          <p className=\"list-item-title\">{car.model}</p>\n          <p className=\"list-item-description\">{car.plate}</p>\n          {car.localiza_active === 1 && (\n            <p\n              className=\"list-item-description\"\n              style={{ color: \"orange\", marginLeft: 64 }}\n            >\n              Localiza\n            </p>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { getParks } from \"../dataInterface\";\n\nexport const ParkingLots = props => {\n  const [parks, setParks] = useState([]);\n  useEffect(() => {\n    getParks().then(p => setParks(p.parklots));\n  }, []);\n\n  return (\n    <div className=\"page-container\">\n      {parks.map(pl => (\n        <div\n          className=\"list-item\"\n          style={{\n            display: \"flex\",\n            height: 80,\n            justifyContent: \"space-between\"\n          }}\n          key={pl.name}\n        >\n          <div>\n            <p className=\"list-item-title\">{pl.name}</p>\n            <p className=\"list-item-description\">{pl.adress}</p>\n          </div>\n          <p\n            className=\"list-item-description\"\n            style={{ color: getSpotsColor(pl.free_car_spots) }}\n          >\n            {pl.free_car_spots}\n          </p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst getSpotsColor = spots => {\n  const s = spots.split(\"/\");\n  const ratio = +s[0] / +s[1];\n  return ratio > 0 ? \"white\" : \"red\";\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Header } from \"./components/header\";\nimport { Cars } from \"./pages/cars\";\nimport { ParkingLots } from \"./pages/parkingLots\";\n\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [path, setPath] = useState(\"\");\n\n  const title = path === \"cars\" ? \"Carros\" : \"Estacionamentos\";\n  return (\n    <div>\n      <Header onClick={() => setIsOpen(true)} title={title} />\n      <div className={\"side-menu\" + (isOpen ? \" open\" : \"\")}>\n        <img\n          src={require(\"./icons/close.svg\")}\n          onClick={() => setIsOpen(false)}\n          style={{ marginBottom: 16 }}\n        />\n        <div\n          onClick={() => {\n            setPath(\"parks\");\n            setIsOpen(false);\n          }}\n          className=\"menu-item\"\n        >\n          Estacionamentos\n        </div>\n        <div\n          onClick={() => {\n            setPath(\"cars\");\n            setIsOpen(false);\n          }}\n          className=\"menu-item\"\n        >\n          Carros\n        </div>\n      </div>\n      {path === \"cars\" && <Cars />}\n      {path === \"parks\" && <ParkingLots />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}